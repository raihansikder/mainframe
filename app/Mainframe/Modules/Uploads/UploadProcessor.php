<?php

namespace App\Mainframe\Modules\Uploads;

use App\Mainframe\Modules\Modules\Module;
use App\Mainframe\Features\Modular\Validator\ModelProcessor;

class UploadProcessor extends ModelProcessor
{
    /**
     * Fill the model with values. This is helpful when a model has additional
     * fields that is not filled through mass assignment but needs to be
     * filled so that the data is locally available. Often in the
     * case of id-name pair id will be filled by mass assignment
     * but the name needs to be auto filled in this method.
     *
     * @param $upload \App\Mainframe\Modules\Uploads\Upload|mixed
     * @return $this
     */
    public function fill($upload)
    {
        $upload->is_active = 1;

        $module = null;
        if (isset($upload->element_id)) {
            $module = Module::find($upload->module_id);
        }

        $element = null;
        if ($module && isset($upload->element_id)) {
            /** @var \App\Mainframe\Features\Modular\BaseModule\BaseModule $model */
            $model = $module->model;
            $element = $model::find($upload->element_id);
        }

        if ($module) {
            $upload->uploadable_type = trim($module->model, '\\');
        }

        if ($element) {
            $upload->uploadable_id = $element->id;
            $upload->element_uuid = $element->uuid;
        }

        $upload->ext = extFrmPath($upload->path); // Store file extension separately

        return $this;
    }

    /*
    |--------------------------------------------------------------------------
    | Rules.
    |--------------------------------------------------------------------------
    |
    | Write the laravel validation rules
    */
    /**
     * Validation rules. For regular expression validation use array instead of pipe
     *
     * @param       $element
     * @param  array  $merge
     * @return array
     */
    public static function rules($element, $merge = [])
    {
        $rules = [
            'type' => 'in:'.implode(',', Upload::$types),
        ];

        return array_merge($rules, $merge);
    }

    /*
    |--------------------------------------------------------------------------
    | Execute validation on module events
    |--------------------------------------------------------------------------
    |
    | Check validations on saving, creating, updating, deleting and restoring
    */
    /**
     * Run validations for saving. This should be common for both creating and updating.
     *
     * @return $this
     */

    /**
     * Run validations for creating. This should always call the saving().
     *
     * @return \App\Mainframe\Features\Modular\Validator\ModelProcessor|\App\Mainframe\Modules\Settings\SettingProcessor
     */
    // public function creating()
    // {
    //     return parent::creating(); // TODO: Change the autogenerated stub
    // }

    /**
     * Run validations for updating. This should always call the saving().
     *
     * @return \App\Mainframe\Features\Modular\Validator\ModelProcessor|\App\Mainframe\Modules\Settings\SettingProcessor
     */
    // public function updating()
    // {
    //     return parent::updating(); // TODO: Change the autogenerated stub
    // }

    /**
     * Run validations for deleting.
     *
     * @return \App\Mainframe\Features\Modular\Validator\ModelProcessor|\App\Mainframe\Modules\Settings\SettingProcessor
     */
    // public function deleting()
    // {
    //     return parent::deleting(); // TODO: Change the autogenerated stub
    // }

    /**
     * Run validations for restoring. This should always call the saving().
     *
     * @return \App\Mainframe\Features\Modular\Validator\ModelProcessor|\App\Mainframe\Modules\Settings\SettingProcessor
     */
    // public function restoring()
    // {
    //     return parent::restoring(); // TODO: Change the autogenerated stub
    // }

    /*
    |--------------------------------------------------------------------------
    | Validation helper functions
    |--------------------------------------------------------------------------
    |
    | All validation must be checked through some function. All validation
    | functions are listed below.
    */

    /**
     * Validate the name. Name should not be 'Joker'
     *
     * @return $this
     */
    private function uploadNameShouldNotBeJoker()
    {
        $upload = $this->element;

        if ($upload->name === 'Joker') {
            $this->fieldError('name', "Name can not be Joker");
        }

        return $this;
    }
}