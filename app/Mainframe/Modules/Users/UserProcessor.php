<?php

namespace App\Mainframe\Modules\Users;

use Request;
use App\Mainframe\Features\Modular\Validator\ModelProcessor;

class UserProcessor extends ModelProcessor
{
    /*
    |--------------------------------------------------------------------------
    | Fill model .
    |--------------------------------------------------------------------------
    |
    | Sometimes you need to automatically fill some fields of a model based
    | on known logic. For example: if you can take first_name and last_name
    | of an user and auto fill full_name.
    */

    /** @noinspection SenselessMethodDuplicationInspection */
    /**
     * Fill the model with values
     *
     * @param  \App\User  $user
     * @return $this
     */
    public function fill($user)
    {
        parent::fill($user);

        $user->is_test = $user->is_test ?? 0;
        $user->is_active = $user->is_active ?? 0;
        $user->resolveName();

        return $this;
    }

    /*
    |--------------------------------------------------------------------------
    | Rules.
    |--------------------------------------------------------------------------
    |
    | Write the laravel validation rules
    */

    /**
     * Validation rules. For regular expression validation use array instead of pipe
     *
     * @param       $element
     * @param  array  $merge
     * @return array
     */
    public static function rules($element, $merge = [])
    {
        $rules = [
            'email' => 'required|email|unique:users,email'.(isset($element->id) ? ",$element->id" : ''),
            'first_name' => 'required|between:0,128',
            'last_name' => 'required|between:0,128',
            'address1' => 'between:0,512',
            'address2' => 'between:0,512',
            'city' => 'between:0,64',
            'county' => 'between:0,64',
            'zip_code' => 'between:0,20',
            'phone' => 'between:0,20',
            'mobile' => 'between:0,20',
        ];

        // While creation/registration of user password and password_confirm both should be available
        // Also if one password is given the other one should be given as well
        // While creation/registration of user password and password_confirm both should be available
        // if (! isset($element->id)) {
        //     $rules = array_merge($rules, [
        //         'password' => 'required|min:6|confirmed',
        //     ]);
        // } elseif (Request::get('password')) {
        //     $rules = array_merge($rules, [
        //         'password' => 'min:6|confirmed',
        //     ]);
        // }

        return array_merge($rules, $merge);
    }

    /*
   |--------------------------------------------------------------------------
   | Execute validation on module events
   |--------------------------------------------------------------------------
   |
   | Check validations on saving, creating, updating, deleting and restoring
   */

    /**
     * Run validations for saving. This should be common for both creating and updating.
     *
     * @param  \App\User  $user
     * @return $this
     */
    public function saving($user)
    {
        parent::saving($user);
        /*
        |--------------------------------------------------------------------------
        | Call validation functions one by one.
        |--------------------------------------------------------------------------
        |
        | A list of functions that will be called sequentially to validate the model
        */
        $this->userNameShouldNotbeJoker($user);

        return $this;
    }
    /**
     * Run validations for creating. This should always call the saving().
     *
     * @return \App\Mainframe\Features\Modular\Validator\ModelProcessor|\App\Mainframe\Modules\Settings\SettingProcessor
     */
    // public function creating()
    // {
    //     return parent::creating(); // TODO: Change the autogenerated stub
    // }

    /**
     * Run validations for updating. This should always call the saving().
     *
     * @return \App\Mainframe\Features\Modular\Validator\ModelProcessor|\App\Mainframe\Modules\Settings\SettingProcessor
     */
    // public function updating()
    // {
    //     return parent::updating(); // TODO: Change the autogenerated stub
    // }

    /**
     * Run validations for deleting.
     *
     * @return \App\Mainframe\Features\Modular\Validator\ModelProcessor|\App\Mainframe\Modules\Settings\SettingProcessor
     */
    // public function deleting()
    // {
    //     return parent::deleting(); // TODO: Change the autogenerated stub
    // }

    /**
     * Run validations for restoring. This should always call the saving().
     *
     * @return \App\Mainframe\Features\Modular\Validator\ModelProcessor|\App\Mainframe\Modules\Settings\SettingProcessor
     */
    // public function restoring()
    // {
    //     return parent::restoring(); // TODO: Change the autogenerated stub
    // }

    /*
    |--------------------------------------------------------------------------
    | Validation helper functions
    |--------------------------------------------------------------------------
    |
    | All validation must be checked through some function. All validation
    | functions are listed below.
    */

    /**
     * Validate the name. Name should not be 'Joker'
     *
     * @param  \App\User  $user
     * @return $this
     */
    private function userNameShouldNotBeJoker($user)
    {
        if ($user->name === 'Joker') {
            $this->fieldError('name', "Name can not be Joker");
        }

        return $this;
    }
}